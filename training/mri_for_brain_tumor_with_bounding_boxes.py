# -*- coding: utf-8 -*-
"""MRI for Brain Tumor with Bounding Boxes

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/azharhayat271/mri-for-brain-tumor-with-bounding-boxes.ecdc6526-a431-442e-aea2-f5aecf74305b.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250412/auto/storage/goog4_request%26X-Goog-Date%3D20250412T074612Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D50c209bcaa2929a2b3829a6b64279e9b6a67e307536ab39e952ac44ae0ddccd82c3f08edae8a9e643e218ad349514ed7c2fadf15bb5072bf3251c0c448e46457fb70283ca6adfc1f71fef496b72ff982d1dbb491a93cb2ccc3c068e2167cdf241d287a10cb9d318c292b647f0596b20739101a6743ce3647ad6672eb02c3f0e27843fd166b1c5630f36383cccea3fc968c12f4c42827a20c61a07e46e6fb4b1e93fa585f3db3e05bc5da9201ec4ae7e2ca6f4a7a218eca520541d409169b6ef2ce633a02e0ce99782227d5539eeea9107b14c0a2ea193ee2bfab31fc4bfd6d30334bb5eb3e9a7ee92259c71343fed2bc3e0ec0692cee6c5e070e5c9feb69d565
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
ahmedsorour1_mri_for_brain_tumor_with_bounding_boxes_path = kagglehub.dataset_download('ahmedsorour1/mri-for-brain-tumor-with-bounding-boxes')

print('Data source import complete.')

import albumentations as A
import numpy as np
import cv2
from PIL import Image
from pathlib import Path
from tqdm import tqdm
import yaml
import os
import random
import pandas as pd
import seaborn as sns
import plotly.graph_objects as go
import matplotlib.patches as patches
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
#!pip install ultralytics
#from ultralytics.utils import metrics

# Commented out IPython magic to ensure Python compatibility.
# %pip install ultralytics
import ultralytics
ultralytics.checks()
from ultralytics import YOLO

def load_data(directory):
    images = []
    labels = []
    for class_name in os.listdir(directory):
        images_path = os.path.join(directory, class_name, 'images')
        labels_path = os.path.join(directory, class_name, 'labels')

        for image in os.listdir(images_path):
            img = cv2.imread(os.path.join(images_path, image))
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            label_file = image.replace('.jpg','.txt')
            label_file_path = os.path.join(labels_path, label_file)

            if os.path.exists(label_file_path):
                with open(label_file_path, 'r') as file:
                    label_data = file.readline().strip().split()
                    if len(label_data) > 0:
                        images.append(img)
                        labels.append(label_data)
                    else:
                        print(f"Label file {label_file_path} is empty, skipping this image")
            else:
                print(f"Label file {label_file_path} not found, skipping this image.")
    return images, labels

train_path = '/kaggle/input/mri-for-brain-tumor-with-bounding-boxes/Train'
val_path = '/kaggle/input/mri-for-brain-tumor-with-bounding-boxes/Val'

train_images, train_labels = load_data(train_path)
val_images, val_labels = load_data(val_path)

def display_random_images(directory, num_images=3):

    for class_name in os.listdir(directory):
        class_path = os.path.join(directory, class_name)
        images_path = os.path.join(directory, class_name, 'images')

        images = os.listdir(images_path)
        selected_images = random.sample(images, num_images)

        fig, axes = plt.subplots(1,3, figsize=(15,5))

        fig.suptitle(f"Displaying Images from {class_name}", fontsize=16, fontweight='bold')

        for ax, image in zip(axes, selected_images):
            image_path = os.path.join(images_path, image)
            img = mpimg.imread(image_path)
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            ax.imshow(img)
            ax.set_title(f"{class_name} - {os.path.basename(image)}",fontweight='bold')
            ax.set_xticks([])
            ax.set_yticks([])


display_random_images(train_path)

def images_preprocessing(images):
    processed_images = []
    for img in images:
        img_resized = cv2.resize(img, (640,640))
        processed_images.append(img_resized)

    return np.array(processed_images)

train_images = images_preprocessing(train_images)
val_images = images_preprocessing(val_images)

def count_images_in_folders(base_path):
    image_counts = []

    # Get all directories in the base_path
    main_directories = [d for d in os.listdir(base_path) if os.path.isdir(os.path.join(base_path, d))]

    for main_dir in main_directories:
        images_dir_path = os.path.join(base_path, main_dir, 'images')

        images = [f for f in os.listdir(images_dir_path) if os.path.isfile(os.path.join(images_dir_path, f))]

        print(f'\033[1mNumber of Images in {main_dir} : {len(images)}\033[0m')
        image_counts.append({'Class': main_dir, 'Count': len(images)})
    df = pd.DataFrame(image_counts).sort_values(by='Count',ascending=False)

    colors = ['#a6a832','#32a0a8', '#599173', '#bfbf95']
    fig = go.Figure(data=[go.Pie(labels=df['Class'], values = df['Count'], pull=[0.1,0,0,0],
                             textinfo ='label+percent', marker=dict(colors=colors, line=dict(color='black', width=2)))])
    fig.update_layout(paper_bgcolor='#dff2ef', plot_bgcolor='#dff2ef', title = 'Number of Images in Each Class', width=650, height=600, title_x=0.5,
                  title_font_family="Times New Roman", title_font_color="#191e1f", title_font_size=30, font_family="Times New Roman", font_size=15)
    fig.show()
    return

base_path = '/kaggle/input/mri-for-brain-tumor-with-bounding-boxes/Train'
count_images_in_folders(base_path)

def count_labels_in_folders(base_path):
    label_counts = []

    # Get all directories in the base_path
    main_directories = [d for d in os.listdir(base_path) if os.path.isdir(os.path.join(base_path, d))]

    for main_dir in main_directories:
        label_dir_path = os.path.join(base_path, main_dir, 'labels')

        labels = [f for f in os.listdir(label_dir_path) if os.path.isfile(os.path.join(label_dir_path, f))]

        print(f'\033[1mNumber of Labels in {main_dir} : {len(labels)}\033[0m')
        label_counts.append({'Class': main_dir, 'Count': len(labels)})
    df1 = pd.DataFrame(label_counts).sort_values(by='Count',ascending=False)

    sns.barplot(df1, x='Class', y='Count', width=0.7, edgecolor='purple', linewidth=2, palette=sns.cubehelix_palette(n_colors=len(df1)))

    plt.title("Distribution of the labels", weight='bold', fontsize=14)
    plt.xticks(color='black',weight='bold')
    plt.yticks(color='black',weight='bold')
    plt.xlabel('', weight='bold', fontsize=14)
    plt.ylabel('',weight='bold', fontsize=14)
    plt.grid(False)

    return

base_path = '/kaggle/input/mri-for-brain-tumor-with-bounding-boxes/Train'
count_labels_in_folders(base_path)

dataset_yaml = {
    'path': '/kaggle/input/mri-for-brain-tumor-with-bounding-boxes',
    'train': 'Train',
    'val': 'Val',
    'names': ["Glioma", "Meningioma", "No Tumor", "Pituitary"]
}

with open('/kaggle/working/dataset_yaml.yaml', 'w') as file:
    yaml.dump(dataset_yaml, file)

model = YOLO('yolov8n.yaml')
model = YOLO('yolov8n.pt')
train_results = model.train(data='/kaggle/working/dataset_yaml.yaml' , epochs=5, imgsz=640)

classes = ["Glioma", "Meningioma", "No Tumor", "Pituitary"]

# Function to display detection results with highlighted parts
def display_samples(images, model):
    fig, axes = plt.subplots(5,2,figsize=(15, 20))
    fig.suptitle('YOLOv8 Detection')
    axes = axes.flatten()

    selected_images = random.sample(list(images), 10)

    for i, img in enumerate(selected_images):
        result = model.predict(img)[0]
        ax=axes[i]
        ax.imshow(img)
#         ax = plt.gca()

        for detection in result.boxes:
            x1, y1, x2, y2 = detection.xyxy[0].cpu().numpy()
            conf = detection.conf[0].cpu().numpy()
            cls = detection.cls[0].cpu().numpy()
            rect = patches.Rectangle((x1, y1), x2-x1, y2-y1, linewidth=2, edgecolor='r', facecolor='none')
            ax.add_patch(rect)
            ax.text(x1, y1, f"{classes[int(cls)]} {conf:.2f}", color='white', fontsize=12, backgroundcolor='red')
    plt.tight_layout()

display_samples(val_images, model)

# Path to the results directory (adjust the path based on your setup)
results_dir = '/kaggle/working/runs/detect/train'

# List all images in the directory
result_images = [img for img in os.listdir(results_dir) if img.endswith('.jpg') or img.endswith('.png')]

# Display the images
for img_name in result_images:
    img_path = os.path.join(results_dir, img_name)
    img = Image.open(img_path)
    plt.figure(figsize=(10, 10))
    plt.imshow(img)
    plt.title(img_name)
    plt.axis('off')
    plt.show()

model.save('/kaggle/working/trained_model.pt')  # Save to the desired path